#include <stddef.h>
#include <torch/all.h>
#include "cutlass/cutlass.h"
#include "quantization/cutlass_w8a8/scaled_mm_c3x.cuh"

void {{ _name }}(torch::Tensor &out, torch::Tensor const &a,
                torch::Tensor const &b) {

  using TileShape =  {{ _tile_shape }};
  using ClusterShape = {{ _cluster_shape }};
  using KernelSchedule = typename {{ _kernel_schedule }};
  using AccType = {{ _acc_type }};
  using TileSchedule = typename {{ _tile_schedule }};
  static constexpr cutlass::gemm::GemmUniversalMode Mode = {{ _gemm_mode }};

  TORCH_CHECK(a.dtype() == {{ _torch_input_dtype }});
  TORCH_CHECK(b.dtype() == {{ _torch_input_dtype}});

  if (out.dtype() == torch::kBFloat16) {
    using Cutlass3xGemm =
      cutlass_3x_simple_gemm<cutlass::float_e4m3_t,
                      cutlass::bfloat16_t,
                      TileShape,
                      ClusterShape,
                      KernelSchedule,
                      AccType,
                      TileSchedule,
                      Mode>;

    return cutlass_simple_gemm_caller<Cutlass3xGemm>(out, a, b);

  } else {
    TORCH_CHECK(out.dtype() == torch::kFloat16);

    using Cutlass3xGemm =
      cutlass_3x_simple_gemm<cutlass::float_e4m3_t,
                      cutlass::half_t,
                      TileShape,
                      ClusterShape,
                      KernelSchedule,
                      AccType,
                      TileSchedule,
                      Mode>;

    return cutlass_simple_gemm_caller<Cutlass3xGemm>(
        out, a, b);
  }
}
